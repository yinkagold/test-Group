{"version":3,"sources":["isLength.js"],"names":["MAX_SAFE_INTEGER","isLength","value"],"mappings":";;;;;AAAA;AACA,IAAMA,mBAAmB,gBAAzB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IACLA,QAAQ,CAAC,CADJ,IACSA,QAAQ,CAAR,IAAa,CADtB,IAC2BA,SAASF,gBAD3C;AAED;;kBAEcC,Q","file":"isLength.js","sourceRoot":"C:/TUT2019/SoftwareTesting/COMP.SE.200-2021-2022-1/src","sourcesContent":["/** Used as references for various `Number` constants. */\nconst MAX_SAFE_INTEGER = 9007199254740991\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * isLength(3)\n * // => true\n *\n * isLength(Number.MIN_VALUE)\n * // => false\n *\n * isLength(Infinity)\n * // => false\n *\n * isLength('3')\n * // => false\n */\nfunction isLength(value) {\n  return typeof value === 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER\n}\n\nexport default isLength\n"]}