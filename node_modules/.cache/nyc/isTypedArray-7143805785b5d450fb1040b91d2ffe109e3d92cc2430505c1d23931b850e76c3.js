'use strict';function cov_52kxqab3u(){var path="C:\\TUT2019\\SoftwareTesting\\COMP.SE.200-2021-2022-1\\src\\isTypedArray.js";var hash="9f6fdae8fef1989887dd0d229b501f0dc6ea3eb9";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\TUT2019\\SoftwareTesting\\COMP.SE.200-2021-2022-1\\src\\isTypedArray.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:7,column:14},end:{line:7,column:46}},"2":{start:{line:9,column:15},end:{line:9,column:46}},"3":{start:{line:11,column:17},end:{line:11,column:52}},"4":{start:{line:13,column:18},end:{line:13,column:52}},"5":{start:{line:15,column:20},end:{line:15,column:48}},"6":{start:{line:17,column:21},end:{line:17,column:58}},"7":{start:{line:19,column:39},end:{line:19,column:93}},"8":{start:{line:22,column:17},end:{line:22,column:92}},"9":{start:{line:25,column:23},end:{line:25,column:78}},"10":{start:{line:42,column:19},end:{line:46,column:1}},"11":{start:{line:43,column:2},end:{line:43,column:33}},"12":{start:{line:45,column:2},end:{line:45,column:93}},"13":{start:{line:48,column:0},end:{line:48,column:31}}},fnMap:{"0":{name:"_interopRequireDefault",decl:{start:{line:19,column:9},end:{line:19,column:31}},loc:{start:{line:19,column:37},end:{line:19,column:95}},line:19},"1":{name:"(anonymous_1)",decl:{start:{line:42,column:38},end:{line:42,column:39}},loc:{start:{line:42,column:55},end:{line:44,column:1}},line:42},"2":{name:"(anonymous_2)",decl:{start:{line:44,column:4},end:{line:44,column:5}},loc:{start:{line:44,column:21},end:{line:46,column:1}},line:44}},branchMap:{"0":{loc:{start:{line:19,column:46},end:{line:19,column:92}},type:"cond-expr",locations:[{start:{line:19,column:70},end:{line:19,column:73}},{start:{line:19,column:76},end:{line:19,column:92}}],line:19},"1":{loc:{start:{line:19,column:46},end:{line:19,column:67}},type:"binary-expr",locations:[{start:{line:19,column:46},end:{line:19,column:49}},{start:{line:19,column:53},end:{line:19,column:67}}],line:19},"2":{loc:{start:{line:25,column:23},end:{line:25,column:78}},type:"binary-expr",locations:[{start:{line:25,column:23},end:{line:25,column:42}},{start:{line:25,column:46},end:{line:25,column:78}}],line:25},"3":{loc:{start:{line:42,column:19},end:{line:46,column:1}},type:"cond-expr",locations:[{start:{line:42,column:38},end:{line:44,column:1}},{start:{line:44,column:4},end:{line:46,column:1}}],line:42},"4":{loc:{start:{line:45,column:9},end:{line:45,column:92}},type:"binary-expr",locations:[{start:{line:45,column:9},end:{line:45,column:43}},{start:{line:45,column:47},end:{line:45,column:92}}],line:45}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},inputSourceMap:{version:3,sources:["isTypedArray.js"],names:["reTypedTag","nodeIsTypedArray","nodeTypes","isTypedArray","value","test"],mappings:";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAMA,aAAa,2EAAnB;;AAEA;AACA,IAAMC,mBAAmBC,uBAAaA,oBAAUC,YAAhD;;AAEA;;;;;;;;;;;;;;;AAeA,IAAMA,eAAeF,mBACjB,UAACG,KAAD;AAAA,SAAWH,iBAAiBG,KAAjB,CAAX;AAAA,CADiB,GAEjB,UAACA,KAAD;AAAA,SAAW,4BAAaA,KAAb,KAAuBJ,WAAWK,IAAX,CAAgB,sBAAOD,KAAP,CAAhB,CAAlC;AAAA,CAFJ;;kBAIeD,Y",file:"isTypedArray.js",sourceRoot:"C:/TUT2019/SoftwareTesting/COMP.SE.200-2021-2022-1/src",sourcesContent:["import getTag from './.internal/getTag.js'\nimport nodeTypes from './.internal/nodeTypes.js'\nimport isObjectLike from './isObjectLike.js'\n\n/** Used to match `toStringTag` values of typed arrays. */\nconst reTypedTag = /^\\[object (?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)Array\\]$/\n\n/* Node.js helper references. */\nconst nodeIsTypedArray = nodeTypes && nodeTypes.isTypedArray\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * isTypedArray(new Uint8Array)\n * // => true\n *\n * isTypedArray([])\n * // => false\n */\nconst isTypedArray = nodeIsTypedArray\n  ? (value) => nodeIsTypedArray(value)\n  : (value) => isObjectLike(value) && reTypedTag.test(getTag(value))\n\nexport default isTypedArray\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"9f6fdae8fef1989887dd0d229b501f0dc6ea3eb9"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_52kxqab3u=function(){return actualCoverage;};}return actualCoverage;}cov_52kxqab3u();cov_52kxqab3u().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});var _getTag=(cov_52kxqab3u().s[1]++,require('./.internal/getTag.js'));var _getTag2=(cov_52kxqab3u().s[2]++,_interopRequireDefault(_getTag));var _nodeTypes=(cov_52kxqab3u().s[3]++,require('./.internal/nodeTypes.js'));var _nodeTypes2=(cov_52kxqab3u().s[4]++,_interopRequireDefault(_nodeTypes));var _isObjectLike=(cov_52kxqab3u().s[5]++,require('./isObjectLike.js'));var _isObjectLike2=(cov_52kxqab3u().s[6]++,_interopRequireDefault(_isObjectLike));function _interopRequireDefault(obj){cov_52kxqab3u().f[0]++;cov_52kxqab3u().s[7]++;return(cov_52kxqab3u().b[1][0]++,obj)&&(cov_52kxqab3u().b[1][1]++,obj.__esModule)?(cov_52kxqab3u().b[0][0]++,obj):(cov_52kxqab3u().b[0][1]++,{default:obj});}/** Used to match `toStringTag` values of typed arrays. */var reTypedTag=(cov_52kxqab3u().s[8]++,/^\[object (?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)Array\]$/);/* Node.js helper references. */var nodeIsTypedArray=(cov_52kxqab3u().s[9]++,(cov_52kxqab3u().b[2][0]++,_nodeTypes2.default)&&(cov_52kxqab3u().b[2][1]++,_nodeTypes2.default.isTypedArray));/**
 * Checks if `value` is classified as a typed array.
 *
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * isTypedArray(new Uint8Array)
 * // => true
 *
 * isTypedArray([])
 * // => false
 */var isTypedArray=(cov_52kxqab3u().s[10]++,nodeIsTypedArray?(cov_52kxqab3u().b[3][0]++,function(value){cov_52kxqab3u().f[1]++;cov_52kxqab3u().s[11]++;return nodeIsTypedArray(value);}):(cov_52kxqab3u().b[3][1]++,function(value){cov_52kxqab3u().f[2]++;cov_52kxqab3u().s[12]++;return(cov_52kxqab3u().b[4][0]++,(0,_isObjectLike2.default)(value))&&(cov_52kxqab3u().b[4][1]++,reTypedTag.test((0,_getTag2.default)(value)));}));cov_52kxqab3u().s[13]++;exports.default=isTypedArray;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzVHlwZWRBcnJheS5qcyJdLCJuYW1lcyI6WyJyZVR5cGVkVGFnIiwibm9kZUlzVHlwZWRBcnJheSIsIm5vZGVUeXBlcyIsImlzVHlwZWRBcnJheSIsInZhbHVlIiwidGVzdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQTtBQUNBLElBQU1BLGFBQWEsMkVBQW5COztBQUVBO0FBQ0EsSUFBTUMsbUJBQW1CQyx1QkFBYUEsb0JBQVVDLFlBQWhEOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7QUFlQSxJQUFNQSxlQUFlRixtQkFDakIsVUFBQ0csS0FBRDtBQUFBLFNBQVdILGlCQUFpQkcsS0FBakIsQ0FBWDtBQUFBLENBRGlCLEdBRWpCLFVBQUNBLEtBQUQ7QUFBQSxTQUFXLDRCQUFhQSxLQUFiLEtBQXVCSixXQUFXSyxJQUFYLENBQWdCLHNCQUFPRCxLQUFQLENBQWhCLENBQWxDO0FBQUEsQ0FGSjs7a0JBSWVELFkiLCJmaWxlIjoiaXNUeXBlZEFycmF5LmpzIiwic291cmNlUm9vdCI6IkM6L1RVVDIwMTkvU29mdHdhcmVUZXN0aW5nL0NPTVAuU0UuMjAwLTIwMjEtMjAyMi0xL3NyYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRUYWcgZnJvbSAnLi8uaW50ZXJuYWwvZ2V0VGFnLmpzJ1xuaW1wb3J0IG5vZGVUeXBlcyBmcm9tICcuLy5pbnRlcm5hbC9ub2RlVHlwZXMuanMnXG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJ1xuXG4vKiogVXNlZCB0byBtYXRjaCBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG5jb25zdCByZVR5cGVkVGFnID0gL15cXFtvYmplY3QgKD86RmxvYXQoPzozMnw2NCl8KD86SW50fFVpbnQpKD86OHwxNnwzMil8VWludDhDbGFtcGVkKUFycmF5XFxdJC9cblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbmNvbnN0IG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVHlwZXMgJiYgbm9kZVR5cGVzLmlzVHlwZWRBcnJheVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KVxuICogLy8gPT4gdHJ1ZVxuICpcbiAqIGlzVHlwZWRBcnJheShbXSlcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmNvbnN0IGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXlcbiAgPyAodmFsdWUpID0+IG5vZGVJc1R5cGVkQXJyYXkodmFsdWUpXG4gIDogKHZhbHVlKSA9PiBpc09iamVjdExpa2UodmFsdWUpICYmIHJlVHlwZWRUYWcudGVzdChnZXRUYWcodmFsdWUpKVxuXG5leHBvcnQgZGVmYXVsdCBpc1R5cGVkQXJyYXlcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzVHlwZWRBcnJheS5qcyJdLCJuYW1lcyI6WyJyZVR5cGVkVGFnIiwibm9kZUlzVHlwZWRBcnJheSIsIm5vZGVUeXBlcyIsImlzVHlwZWRBcnJheSJdLCJtYXBwaW5ncyI6Ijt5S0FBQSxHQUFBLENBQUEsT0FBQSx5QkFBQSxPQUFBLENBQUEsdUJBQUEsQ0FBQSxDQUFBLEMsc0VBQ0EsR0FBQSxDQUFBLFVBQUEseUJBQUEsT0FBQSxDQUFBLDBCQUFBLENBQUEsQ0FBQSxDLDRFQUNBLEdBQUEsQ0FBQSxhQUFBLHlCQUFBLE9BQUEsQ0FBQSxtQkFBQSxDQUFBLENBQUEsQyxrVUFFQSwwREFDQSxHQUFNQSxDQUFBQSxVQUFBQSx5QkFBTiwyRUFBTUEsQ0FBTixDQUVBLGdDQUNBLEdBQU1DLENBQUFBLGdCQUFBQSx5QkFBbUJDLDJCQUFBQSxXQUFBQSxDQUFBQSxPQUFBQSw4QkFBYUEsV0FBQUEsQ0FBQUEsT0FBQUEsQ0FBdEMsWUFBeUJBLENBQW5CRCxDQUFOLENBRUE7Ozs7Ozs7Ozs7Ozs7O0dBZUEsR0FBTUUsQ0FBQUEsWUFBQUEsMEJBQWUsZ0JBQUEsNEJBQ2pCLFNBQUEsS0FBQSxDQUFBLGdEQUFBLE1BQVdGLENBQUFBLGdCQUFBQSxDQUFYLEtBQVdBLENBQVgsQ0FEaUIsQ0FBQSw2QkFFakIsU0FBQSxLQUFBLENBQUEsZ0RBQUEsTUFBVyw0QkFBQSxFQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsS0FBQSwrQkFBdUJELFVBQUFBLENBQUFBLElBQUFBLENBQWdCLENBQUEsRUFBQSxRQUFBLENBQUEsT0FBQSxFQUFsRCxLQUFrRCxDQUFoQkEsQ0FBdkIsQ0FBWCxDQUZKLENBQXFCLENBQWZHLENBQU4sQyx3Q0FJZUEsWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRUYWcgZnJvbSAnLi8uaW50ZXJuYWwvZ2V0VGFnLmpzJ1xuaW1wb3J0IG5vZGVUeXBlcyBmcm9tICcuLy5pbnRlcm5hbC9ub2RlVHlwZXMuanMnXG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJ1xuXG4vKiogVXNlZCB0byBtYXRjaCBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG5jb25zdCByZVR5cGVkVGFnID0gL15cXFtvYmplY3QgKD86RmxvYXQoPzozMnw2NCl8KD86SW50fFVpbnQpKD86OHwxNnwzMil8VWludDhDbGFtcGVkKUFycmF5XFxdJC9cblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbmNvbnN0IG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVHlwZXMgJiYgbm9kZVR5cGVzLmlzVHlwZWRBcnJheVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KVxuICogLy8gPT4gdHJ1ZVxuICpcbiAqIGlzVHlwZWRBcnJheShbXSlcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmNvbnN0IGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXlcbiAgPyAodmFsdWUpID0+IG5vZGVJc1R5cGVkQXJyYXkodmFsdWUpXG4gIDogKHZhbHVlKSA9PiBpc09iamVjdExpa2UodmFsdWUpICYmIHJlVHlwZWRUYWcudGVzdChnZXRUYWcodmFsdWUpKVxuXG5leHBvcnQgZGVmYXVsdCBpc1R5cGVkQXJyYXlcbiJdLCJzb3VyY2VSb290IjoiQzovVFVUMjAxOS9Tb2Z0d2FyZVRlc3RpbmcvQ09NUC5TRS4yMDAtMjAyMS0yMDIyLTEvc3JjIn0=