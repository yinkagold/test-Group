'use strict';function cov_ulxnp1ybz(){var path="C:\\TUT2019\\SoftwareTesting\\COMP.SE.200-2021-2022-1\\src\\isLength.js";var hash="5202be0903b1d2da63257dde09eca433eb9cf9c6";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\TUT2019\\SoftwareTesting\\COMP.SE.200-2021-2022-1\\src\\isLength.js",statementMap:{"0":{start:{line:3,column:0},end:{line:5,column:3}},"1":{start:{line:7,column:23},end:{line:7,column:39}},"2":{start:{line:34,column:2},end:{line:34,column:96}},"3":{start:{line:37,column:0},end:{line:37,column:27}}},fnMap:{"0":{name:"isLength",decl:{start:{line:33,column:9},end:{line:33,column:17}},loc:{start:{line:33,column:25},end:{line:35,column:1}},line:33}},branchMap:{"0":{loc:{start:{line:34,column:9},end:{line:34,column:95}},type:"binary-expr",locations:[{start:{line:34,column:9},end:{line:34,column:34}},{start:{line:34,column:38},end:{line:34,column:48}},{start:{line:34,column:52},end:{line:34,column:66}},{start:{line:34,column:70},end:{line:34,column:95}}],line:34}},s:{"0":0,"1":0,"2":0,"3":0},f:{"0":0},b:{"0":[0,0,0,0]},inputSourceMap:{version:3,sources:["isLength.js"],names:["MAX_SAFE_INTEGER","isLength","value"],mappings:";;;;;AAAA;AACA,IAAMA,mBAAmB,gBAAzB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IACLA,QAAQ,CAAC,CADJ,IACSA,QAAQ,CAAR,IAAa,CADtB,IAC2BA,SAASF,gBAD3C;AAED;;kBAEcC,Q",file:"isLength.js",sourceRoot:"C:/TUT2019/SoftwareTesting/COMP.SE.200-2021-2022-1/src",sourcesContent:["/** Used as references for various `Number` constants. */\nconst MAX_SAFE_INTEGER = 9007199254740991\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * isLength(3)\n * // => true\n *\n * isLength(Number.MIN_VALUE)\n * // => false\n *\n * isLength(Infinity)\n * // => false\n *\n * isLength('3')\n * // => false\n */\nfunction isLength(value) {\n  return typeof value === 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER\n}\n\nexport default isLength\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"5202be0903b1d2da63257dde09eca433eb9cf9c6"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_ulxnp1ybz=function(){return actualCoverage;};}return actualCoverage;}cov_ulxnp1ybz();cov_ulxnp1ybz().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});/** Used as references for various `Number` constants. */var MAX_SAFE_INTEGER=(cov_ulxnp1ybz().s[1]++,9007199254740991);/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * isLength(3)
 * // => true
 *
 * isLength(Number.MIN_VALUE)
 * // => false
 *
 * isLength(Infinity)
 * // => false
 *
 * isLength('3')
 * // => false
 */function isLength(value){cov_ulxnp1ybz().f[0]++;cov_ulxnp1ybz().s[2]++;return(cov_ulxnp1ybz().b[0][0]++,typeof value==='number')&&(cov_ulxnp1ybz().b[0][1]++,value>-1)&&(cov_ulxnp1ybz().b[0][2]++,value%1==0)&&(cov_ulxnp1ybz().b[0][3]++,value<=MAX_SAFE_INTEGER);}cov_ulxnp1ybz().s[3]++;exports.default=isLength;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzTGVuZ3RoLmpzIl0sIm5hbWVzIjpbIk1BWF9TQUZFX0lOVEVHRVIiLCJpc0xlbmd0aCIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0EsSUFBTUEsbUJBQW1CLGdCQUF6Qjs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBLFNBQVNDLFFBQVQsQ0FBa0JDLEtBQWxCLEVBQXlCO0FBQ3ZCLFNBQU8sT0FBT0EsS0FBUCxLQUFpQixRQUFqQixJQUNMQSxRQUFRLENBQUMsQ0FESixJQUNTQSxRQUFRLENBQVIsSUFBYSxDQUR0QixJQUMyQkEsU0FBU0YsZ0JBRDNDO0FBRUQ7O2tCQUVjQyxRIiwiZmlsZSI6ImlzTGVuZ3RoLmpzIiwic291cmNlUm9vdCI6IkM6L1RVVDIwMTkvU29mdHdhcmVUZXN0aW5nL0NPTVAuU0UuMjAwLTIwMjEtMjAyMi0xL3NyYyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xuY29uc3QgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTFcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogaXNMZW5ndGgoMylcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBpc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKVxuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBpc0xlbmd0aChJbmZpbml0eSlcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogaXNMZW5ndGgoJzMnKVxuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVJcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNMZW5ndGhcbiJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzTGVuZ3RoLmpzIl0sIm5hbWVzIjpbIk1BWF9TQUZFX0lOVEVHRVIiLCJ2YWx1ZSIsImlzTGVuZ3RoIl0sIm1hcHBpbmdzIjoiO3lLQUFBLHlEQUNBLEdBQU1BLENBQUFBLGdCQUFBQSx5QkFBTixnQkFBTUEsQ0FBTixDQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXdCQSxRQUFBLENBQUEsUUFBQSxDQUFBLEtBQUEsQ0FBeUIsK0NBQ3ZCLE1BQU8saUNBQUEsQ0FBQSxLQUFBLEdBQUEsUUFBQSw4QkFDTEMsS0FBQUEsQ0FBUSxDQURILENBQUEsOEJBQ1NBLEtBQUFBLENBQUFBLENBQUFBLEVBRFQsQ0FBQSw4QkFDMkJBLEtBQUFBLEVBRGxDLGdCQUFPLENBQVAsQ0FFRCxDLHVDQUVjQyxRIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG5jb25zdCBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBpc0xlbmd0aCgzKVxuICogLy8gPT4gdHJ1ZVxuICpcbiAqIGlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpXG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIGlzTGVuZ3RoKEluZmluaXR5KVxuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBpc0xlbmd0aCgnMycpXG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUlxufVxuXG5leHBvcnQgZGVmYXVsdCBpc0xlbmd0aFxuIl0sInNvdXJjZVJvb3QiOiJDOi9UVVQyMDE5L1NvZnR3YXJlVGVzdGluZy9DT01QLlNFLjIwMC0yMDIxLTIwMjItMS9zcmMifQ==