{"version":3,"sources":["every.js"],"names":["every","array","predicate","index","length"],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASA,KAAT,CAAeC,KAAf,EAAsBC,SAAtB,EAAiC;AAC/B,MAAIC,QAAQ,CAAC,CAAb;AACA,MAAMC,SAASH,SAAS,IAAT,GAAgB,CAAhB,GAAoBA,MAAMG,MAAzC;;AAEA,SAAO,EAAED,KAAF,GAAUC,MAAjB,EAAyB;AACvB,QAAI,CAACF,UAAUD,MAAME,KAAN,CAAV,EAAwBA,KAAxB,EAA+BF,KAA/B,CAAL,EAA4C;AAC1C,aAAO,KAAP;AACD;AACF;AACD,SAAO,IAAP;AACD;;kBAEcD,K","file":"every.js","sourceRoot":"C:/TUT2019/SoftwareTesting/COMP.SE.200-2021-2022-1/src","sourcesContent":["/**\n * Checks if `predicate` returns truthy for **all** elements of `array`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index, array).\n *\n * **Note:** This method returns `true` for\n * [empty arrays](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty arrays.\n *\n * @since 5.0.0\n * @category Array\n * @param {Array} array The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * every([true, 1, null, 'yes'], Boolean)\n * // => false\n */\nfunction every(array, predicate) {\n  let index = -1\n  const length = array == null ? 0 : array.length\n\n  while (++index < length) {\n    if (!predicate(array[index], index, array)) {\n      return false\n    }\n  }\n  return true\n}\n\nexport default every\n"]}