{"version":3,"sources":["isTypedArray.js"],"names":["reTypedTag","nodeIsTypedArray","nodeTypes","isTypedArray","value","test"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAMA,aAAa,2EAAnB;;AAEA;AACA,IAAMC,mBAAmBC,uBAAaA,oBAAUC,YAAhD;;AAEA;;;;;;;;;;;;;;;AAeA,IAAMA,eAAeF,mBACjB,UAACG,KAAD;AAAA,SAAWH,iBAAiBG,KAAjB,CAAX;AAAA,CADiB,GAEjB,UAACA,KAAD;AAAA,SAAW,4BAAaA,KAAb,KAAuBJ,WAAWK,IAAX,CAAgB,sBAAOD,KAAP,CAAhB,CAAlC;AAAA,CAFJ;;kBAIeD,Y","file":"isTypedArray.js","sourceRoot":"C:/TUT2019/SoftwareTesting/COMP.SE.200-2021-2022-1/src","sourcesContent":["import getTag from './.internal/getTag.js'\nimport nodeTypes from './.internal/nodeTypes.js'\nimport isObjectLike from './isObjectLike.js'\n\n/** Used to match `toStringTag` values of typed arrays. */\nconst reTypedTag = /^\\[object (?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)Array\\]$/\n\n/* Node.js helper references. */\nconst nodeIsTypedArray = nodeTypes && nodeTypes.isTypedArray\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * isTypedArray(new Uint8Array)\n * // => true\n *\n * isTypedArray([])\n * // => false\n */\nconst isTypedArray = nodeIsTypedArray\n  ? (value) => nodeIsTypedArray(value)\n  : (value) => isObjectLike(value) && reTypedTag.test(getTag(value))\n\nexport default isTypedArray\n"]}