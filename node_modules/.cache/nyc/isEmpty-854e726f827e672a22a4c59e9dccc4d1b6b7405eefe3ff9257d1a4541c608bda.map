{"version":3,"sources":["isEmpty.js"],"names":["hasOwnProperty","Object","prototype","isEmpty","value","Array","isArray","splice","length","tag","size","keys","key","call"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAMA,iBAAiBC,OAAOC,SAAP,CAAiBF,cAAxC;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAASG,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,MAAIA,SAAS,IAAb,EAAmB;AACjB,WAAO,IAAP;AACD;AACD,MAAI,2BAAYA,KAAZ,MACCC,MAAMC,OAAN,CAAcF,KAAd,KAAwB,OAAOA,KAAP,KAAiB,QAAzC,IAAqD,OAAOA,MAAMG,MAAb,KAAwB,UAA7E,IACC,wBAASH,KAAT,CADD,IACoB,4BAAaA,KAAb,CADpB,IAC2C,2BAAYA,KAAZ,CAF5C,CAAJ,EAEqE;AACnE,WAAO,CAACA,MAAMI,MAAd;AACD;AACD,MAAMC,MAAM,sBAAOL,KAAP,CAAZ;AACA,MAAIK,OAAO,cAAP,IAAyBA,OAAO,cAApC,EAAoD;AAClD,WAAO,CAACL,MAAMM,IAAd;AACD;AACD,MAAI,2BAAYN,KAAZ,CAAJ,EAAwB;AACtB,WAAO,CAACH,OAAOU,IAAP,CAAYP,KAAZ,EAAmBI,MAA3B;AACD;AACD,OAAK,IAAMI,GAAX,IAAkBR,KAAlB,EAAyB;AACvB,QAAIJ,eAAea,IAAf,CAAoBT,KAApB,EAA2BQ,GAA3B,CAAJ,EAAqC;AACnC,aAAO,KAAP;AACD;AACF;AACD,SAAO,IAAP;AACD;;kBAEcT,O","file":"isEmpty.js","sourceRoot":"C:/TUT2019/SoftwareTesting/COMP.SE.200-2021-2022-1/src","sourcesContent":["import getTag from './.internal/getTag.js'\nimport isArguments from './isArguments.js'\nimport isArrayLike from './isArrayLike.js'\nimport isBuffer from './isBuffer.js'\nimport isPrototype from './.internal/isPrototype.js'\nimport isTypedArray from './isTypedArray.js'\n\n/** Used to check objects for own properties. */\nconst hasOwnProperty = Object.prototype.hasOwnProperty\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * isEmpty(null)\n * // => true\n *\n * isEmpty(true)\n * // => true\n *\n * isEmpty(1)\n * // => true\n *\n * isEmpty([1, 2, 3])\n * // => false\n *\n * isEmpty('abc')\n * // => false\n *\n * isEmpty({ 'a': 1 })\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true\n  }\n  if (isArrayLike(value) &&\n      (Array.isArray(value) || typeof value === 'string' || typeof value.splice === 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length\n  }\n  const tag = getTag(value)\n  if (tag == '[object Map]' || tag == '[object Set]') {\n    return !value.size\n  }\n  if (isPrototype(value)) {\n    return !Object.keys(value).length\n  }\n  for (const key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false\n    }\n  }\n  return true\n}\n\nexport default isEmpty\n"]}