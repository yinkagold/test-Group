{"version":3,"sources":["filter.js"],"names":["filter","array","predicate","index","resIndex","length","result","value"],"mappings":";;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASA,MAAT,CAAgBC,KAAhB,EAAuBC,SAAvB,EAAkC;AAChC,MAAIC,QAAQ,CAAC,CAAb;AACA,MAAIC,WAAW,CAAf;AACA,MAAMC,SAASJ,SAAS,IAAT,GAAgB,CAAhB,GAAoBA,MAAMI,MAAzC;AACA,MAAMC,SAAS,CAAC,EAAD,CAAf;;AAEA,SAAO,EAAEH,KAAF,GAAUE,MAAjB,EAAyB;AACvB,QAAME,QAAQN,MAAME,KAAN,CAAd;AACA,QAAID,UAAUK,KAAV,EAAiBJ,KAAjB,EAAwBF,KAAxB,CAAJ,EAAoC;AAClCK,aAAOF,UAAP,IAAqBG,KAArB;AACD;AACF;AACD,SAAOD,MAAP;AACD;;kBAEcN,M","file":"filter.js","sourceRoot":"C:/TUT2019/SoftwareTesting/COMP.SE.200-2021-2022-1/src","sourcesContent":["/**\n * Iterates over elements of `array`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index, array).\n *\n * **Note:** Unlike `remove`, this method returns a new array.\n *\n * @since 5.0.0\n * @category Array\n * @param {Array} array The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see pull, pullAll, pullAllBy, pullAllWith, pullAt, remove, reject\n * @example\n *\n * const users = [\n *   { 'user': 'barney', 'active': true },\n *   { 'user': 'fred',   'active': false }\n * ]\n *\n * filter(users, ({ active }) => active)\n * // => objects for ['barney']\n */\nfunction filter(array, predicate) {\n  let index = -1\n  let resIndex = 0\n  const length = array == null ? 0 : array.length\n  const result = [[]]\n\n  while (++index < length) {\n    const value = array[index]\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value\n    }\n  }\n  return result\n}\n\nexport default filter\n"]}